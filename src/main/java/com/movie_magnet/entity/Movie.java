package com.movie_magnet.entity;
// Generated 01-Oct-2023, 2:34:46 pm by Hibernate Tools 3.2.2.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import static jakarta.persistence.GenerationType.IDENTITY;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;

/**
 * Movies generated by hbm2java
 */
@Entity
@Table(name = "movies")
public class Movie implements java.io.Serializable {

	private static final long serialVersionUID = -3393652773427519649L;
	private Integer id;
	private Genre genres;
	private String title;
	private Date releaseDate;
	private String director;
	private int duration;
	private String description;
	private String coverImageUrl;
	private String trailerUrl;
	private float averageUserRating;
	private Date createdAt;
	private Date updatedAt;
	private Set<MovieActor> movieActorses = new HashSet<>(0);
	private Set<Review> reviewses = new HashSet<>(0);
	private Set<UserFavorite> userFavoriteses = new HashSet<>(0);
	private Set<MovieDirector> movieDirectorses = new HashSet<>(0);

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "genre_id", nullable = false)
	public Genre getGenres() {
		return this.genres;
	}

	public void setGenres(Genre genres) {
		this.genres = genres;
	}

	@Column(name = "title", nullable = false, length = 500)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "release_date", nullable = false, length = 10)
	public Date getReleaseDate() {
		return this.releaseDate;
	}

	public void setReleaseDate(Date releaseDate) {
		this.releaseDate = releaseDate;
	}

	@Column(name = "director", nullable = false, length = 500)
	public String getDirector() {
		return this.director;
	}

	public void setDirector(String director) {
		this.director = director;
	}

	@Column(name = "duration", nullable = false)
	public int getDuration() {
		return this.duration;
	}

	public void setDuration(int duration) {
		this.duration = duration;
	}

	@Column(name = "description", nullable = false, length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "cover_image_url", nullable = false, length = 500)
	public String getCoverImageUrl() {
		return this.coverImageUrl;
	}

	public void setCoverImageUrl(String coverImageUrl) {
		this.coverImageUrl = coverImageUrl;
	}

	@Column(name = "trailer_url", nullable = false, length = 500)
	public String getTrailerUrl() {
		return this.trailerUrl;
	}

	public void setTrailerUrl(String trailerUrl) {
		this.trailerUrl = trailerUrl;
	}

	@Column(name = "average_user_rating", nullable = false, precision = 12, scale = 0)
	public float getAverageUserRating() {
		return this.averageUserRating;
	}

	public void setAverageUserRating(float averageUserRating) {
		this.averageUserRating = averageUserRating;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 19)
	@CreationTimestamp
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 19)
	@UpdateTimestamp
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "movies")
	public Set<MovieActor> getMovieActorses() {
		return this.movieActorses;
	}

	public void setMovieActorses(Set<MovieActor> movieActorses) {
		this.movieActorses = movieActorses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "movies")
	public Set<Review> getReviewses() {
		return this.reviewses;
	}

	public void setReviewses(Set<Review> reviewses) {
		this.reviewses = reviewses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "movies")
	public Set<UserFavorite> getUserFavoriteses() {
		return this.userFavoriteses;
	}

	public void setUserFavoriteses(Set<UserFavorite> userFavoriteses) {
		this.userFavoriteses = userFavoriteses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "movies")
	public Set<MovieDirector> getMovieDirectorses() {
		return this.movieDirectorses;
	}

	public void setMovieDirectorses(Set<MovieDirector> movieDirectorses) {
		this.movieDirectorses = movieDirectorses;
	}

}
